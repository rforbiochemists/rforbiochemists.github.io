---
title: "Calculating a $V_{max}$ and $K_{m}$ for an Enzyme"
subtitle: "How tightly does my protein bind?"
tags: [data vis, ggplot2, R, lm, standard curve, tutorial]
date: today
author: Brady Johnston
editor: visual
toc: true
number-sections: true
image: enzymeplot.png
toc-location: right
code-fold: false
code-link: true
code-line-numbers: true  
---

Playing around with modelling dose-response curves in R, to calculate a $K_{d}$ for an interaction between a protein and it's potential binding target.
From this we can compare the rates of two enzymes, and see if our mutation had any effect.
Ther results of which can be seen below in @tbl-plot-coefficients.[^1]

[^1]: This isn't actually the best way to go about it.
    There are far too many details, which are more useful if you are doing more advance modelling, but we are just after an estimate of the $K_{m}$ and the $V_{max}$ from our data.

```{r}
library(biochemr)
mod <- Puromycin %>% 
  bio_enzyme_rate(conc, rate, group = state)

purrr::map(mod$model, broom::glance)
```

```{r}
#| label: fig-first-plot
#| fig-cap: The enzyme responses plotted using `bio_plot()` function.
#| fig-cap-location: margin
mod %>% 
  bio_plot(colour = state, facet = FALSE) + 
  ggplot2::coord_cartesian(ylim = c(0, NA))
```

```{r}
#| label: tbl-plot-coefficients
#| tbl-cap: The resulting coefficients from the model.
mod %>% 
  bio_coefs() %>% 
  knitr::kable()

```

Is there actually a difference between the two sates?
We can see their fits inside of @fig-first-plot but we are unsure if it will actually be significant.
We can compare the two models:

```{r}
comp <- purrr::reduce(mod$model, anova) %>% 
  tibble::as_tibble() %>% 
  dplyr::mutate(model = as.character(mod$state))
comp
```

By the looks of things, we probably couldn't say that there was actually a real difference between the two states, with a p-value of only `r round(comp[2, "p value"], 3)` .

## What about with a different data set?

```{r}
#| message: false
#| code-fold: true
mod <- DNase %>% 
  tibble::as_tibble() %>% 
  bio_binding(conc, density, Run)

 
bio_plot(mod,colour = Run) + 
  ggplot2::theme_classic()

mod %>% 
  bio_coefs() %>% 
  knitr::kable()
```
