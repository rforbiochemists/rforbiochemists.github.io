{
  "hash": "df676e8d1282240f18ad9a257f3ea8d5",
  "result": {
    "markdown": "---\ntitle: \"Calculating Protein Concentration\"\nsubtitle: \"How do I make a standard curve in R?\"\ntags: [data vis, ggplot2, R, lm, standard curve, tutorial]\ndate: today\nauthor: Brady Johnston\neditor: visual\ntoc: true\ntoc-location: right\nimage: std_curve.png\nbibliography: references.bib\ncode-fold: show\ncode-link: true\ncode-line-numbers: true  \n---\n\nA common experiment in any kind of lab is the creation of a standard curve to measure the concentration or amount of some unknown sample.\nWhether they be proteins, small molecules or anything in between, it's a standard lab procedure.\n\n::: {layout-ncol=\"2\"}\n-   Item X\n-   Item Y\n-   Item Z\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu\nerat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor\nsagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu\nblandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna.\nMauris sed massa ornare, interdum ipsum a, semper massa.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu\nerat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor\nsagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu\nblandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna.\nMauris sed massa ornare, interdum ipsum a, semper massa.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu\nerat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor\nsagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu\nblandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna.\nMauris sed massa ornare, interdum ipsum a, semper massa.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu\nerat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor\nsagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu\nblandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna.\nMauris sed massa ornare, interdum ipsum a, semper massa.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu\nerat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor\nsagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu\nblandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna.\nMauris sed massa ornare, interdum ipsum a, semper massa.\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur gravida eu\nerat et fring. Morbi congue augue vel eros ullamcorper, eget convallis tortor\nsagittis. Fusce sodales viverra mauris a fringilla. Donec feugiat, justo eu\nblandit placerat, enim dui volutpat turpis, eu dictum lectus urna eu urna.\nMauris sed massa ornare, interdum ipsum a, semper massa.\n:::\n\n::: {layout-ncol=\"2\"}\n### List One\n\n-   Item A\n-   Item B\n-   Item C\n\n### List Two\n\n-   Item X\n-   Item Y\n-   Item Z\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Protein Concentrations\nprot <- c(0.000, 0.016, 0.031, 0.063, 0.125, 0.250, 0.500, 1.000, \n          0.000, 0.016, 0.031, 0.063, 0.125, 0.250, 0.500, 1.000) \n\n# Absorbance from my protein assay\nabs <- c(0.329, 0.352, 0.349, 0.379, 0.417, 0.491, 0.668, 0.956, \n         0.327, 0.341, 0.355, 0.383, 0.417, 0.446, 0.655, 0.905)\n\ndata <- data.frame(\n  prot = prot, \n  abs = abs\n)\n\nunknowns <- c(0.554, 0.568, 0.705)\n\nhead(data)\n```\n\n::: {.cell-output-stdout}\n```\n   prot   abs\n1 0.000 0.329\n2 0.016 0.352\n3 0.031 0.349\n4 0.063 0.379\n5 0.125 0.417\n6 0.250 0.491\n```\n:::\n:::\n\n# The Easy Way\n\nUsing the package `{standard}`, we can fit a stanard curve and use it to predict what the concentrations are for our unkown proteins.\n\n## Fitting a Standard Curve\n\n::: {.cell}\n\n```{.r .cell-code}\n#remotes::install_github(\"rforbiochemists/standard\")\nlibrary(standard)\n\nour_curve <- std_curve_fit(\n  data = data, \n  conc = prot, \n  resp = abs\n  )\nplot(our_curve)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\nThe $R^{2}$ is good and we can confidently use this standard curve to predict what our unknown protein concentrations are.\n\n## Calculating our Unknowns\n\nFor this we can use the `std_curve_predict()` function, which takes a model output from `std_curve_fit()` and a vector of unknowns and returns the predicted values.\n\n::: {.cell}\n\n```{.r .cell-code}\nstd_curve_calc(\n  std_curve = our_curve, \n  unknowns = unknowns\n  ) %>% \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n|   abs|  prot|\n|-----:|-----:|\n| 0.554| 0.361|\n| 0.568| 0.384|\n| 0.705| 0.609|\n:::\n:::\n\nWe can similarly just use `plot()` to quickly generate an informative plot with our standard curve and predicted values all plotted.\n\n::: {.cell}\n\n```{.r .cell-code}\nstd_curve_calc(\n  std_curve = our_curve, \n  unknowns = unknowns\n  ) %>% \n  plot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n## What is `{standard}`?\n\nStandard is an effort to make the use of R for calculating and applying standard curves in molecular biology as painless as possible.\n\nUnder the hood it's just fitting linear models, pulling out relevant statistics and using them to predict values.\nAll of this may seem easy if you are exerienced in R - but the intention of this package is to create a beginner-friendly and *reproducible* API for doing common molecular biology tasks inside of R.\n\n# Fitting the Model\n\n::: {.cell}\n\n```{.r .cell-code}\nmod <- lm(prot ~ abs, data = data)\nsummary(mod)\n```\n\n::: {.cell-output-stdout}\n```\n\nCall:\nlm(formula = prot ~ abs, data = data)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.048237 -0.013238 -0.008318  0.008180  0.067081 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -0.55101    0.02031  -27.13 1.67e-13 ***\nabs          1.64558    0.03878   42.43 3.42e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.03044 on 14 degrees of freedom\nMultiple R-squared:  0.9923,\tAdjusted R-squared:  0.9917 \nF-statistic:  1801 on 1 and 14 DF,  p-value: 3.421e-16\n```\n:::\n:::\n\nWhat about just the coefficients we are interested in?\n\n::: {.cell}\n\n```{.r .cell-code}\ncoefficients(mod)\n```\n\n::: {.cell-output-stdout}\n```\n(Intercept)         abs \n -0.5510076   1.6455755 \n```\n:::\n:::\n\nWhich we can get in a bit nice format with the `{broom}` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nbroom::tidy(mod)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2 x 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)   -0.551    0.0203     -27.1 1.67e-13\n2 abs            1.65     0.0388      42.4 3.42e-16\n```\n:::\n:::\n\nThe $R^{2}$ can be extracted from the model using `summary()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nr_squared <- summary(mod)$r.squared\nprint(r_squared)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 0.9922846\n```\n:::\n:::\n\nWith some unknowns, we can predict what the values will be.\nWe must make sure that the column in this unkown data frame has the appropriate name, `abs` in this case which is the same as what we used in our original model.\n\nWe can use the base function `predict()` to get the predictions, or use the `broom::augment()` to get an already nicely formatted response.\n\n::: {.cell}\n\n```{.r .cell-code}\nunk <- data.frame(\n  abs = c(0.554, 0.568, 0.705)\n)\n\npredict(mod, unk)\n```\n\n::: {.cell-output-stdout}\n```\n        1         2         3 \n0.3606412 0.3836793 0.6091231 \n```\n:::\n\n```{.r .cell-code}\nunk <- broom::augment(mod, newdata = unk)\n```\n\n::: {.cell-output-stderr}\n```\nWarning: 'newdata' had 3 rows but variables found have 16 rows\n```\n:::\n\n```{.r .cell-code}\nunk\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 3 x 2\n    abs .fitted\n  <dbl>   <dbl>\n1 0.554   0.361\n2 0.568   0.384\n3 0.705   0.609\n```\n:::\n:::\n\nTo plot the results:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(magrittr)\n```\n\n::: {.cell-output-stderr}\n```\nWarning: package 'magrittr' was built under R version 4.1.3\n```\n:::\n\n```{.r .cell-code}\nbroom::augment(mod) %>% \n  ggplot(aes(prot, abs)) + \n  geom_smooth(method = \"lm\", colour = \"gray20\", linetype = \"dotted\") + \n  geom_point(aes(y = abs), colour = \"tomato\", size = 4) + \n  geom_point(\n    data = unk, \n    aes(x = .fitted, y = abs), \n    colour = \"black\", \n    alpha = 1,\n    size = 6, \n    shape = 4\n  ) + \n  theme_classic() + \n  theme(aspect.ratio = 0.5) + \n  labs(\n    x = \"[Protein] mg/mL\", \n    y = \"Absorbance (AU)\"\n  ) + \n  annotate(\n    geom = \"text\", \n    x = 0.1, \n    y = 0.9, \n    label = paste(\"Rsq =\", round(r_squared, 2))\n  )\n```\n\n::: {.cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}